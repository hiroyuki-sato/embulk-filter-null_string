plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "checkstyle"

    // Apply this Gradle plugin.
    id "org.embulk.embulk-plugins" version "0.6.1"

}
repositories {
    mavenCentral()
}
configurations {
    provided
}

group = "io.github.hiroyuki-sato"
version = "0.2.0"
description = "An Embulk filter plugin to convert the matching string to NULL."

configurations {
    // We'd recommend to enable dependency locking so that you are aware of transitive dependencies.
    // See: https://docs.gradle.org/current/userguide/dependency_locking.html
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    // "javadoc" JAR and "sources" JAR are required to publish the plugin to Maven Central.
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    compileOnly "org.embulk:embulk-spi:0.11"
    implementation "org.embulk:embulk-util-config:0.4.0"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.embulk:embulk-junit4:0.11"
    testImplementation "org.embulk:embulk-spi:0.11"
    testImplementation "org.embulk:embulk-core:0.11.0"
    testImplementation "org.embulk:embulk-deps:0.11.0"
    testImplementation "org.embulk:embulk-junit4:0.11.0"
}

embulkPlugin {
    // Set the plugin's main class.
    mainClass = "org.embulk.parser.null_string.NullStringFilterPlugin"

    // Set: "decoder", "encoder", "filter", "formatter", "guess", "input", "output", or "parser"
    category = "filter"

    // Set the "type" of the Embulk plugin used in Embulk's configuration YAML.
    // For instance, it would be "example" for "embulk-input-example".
    type = "null_string"
}

// It would be a good habit to contain the LICENSE file(s) at "META-INF/" in your plugin packages.
jar {
    metaInf {
        from rootProject.file("LICENSE.txt")
    }
}
sourcesJar {
    metaInf {
        from rootProject.file("LICENSE.txt")
    }
}
javadocJar {
    metaInf {
        from rootProject.file("LICENSE.txt")
    }
}


// The publishing settings are usually required to publish the plugin to Maven Central.
// Publish it by: "./gradlew publishMavenPublicationToMavenRepository"
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            // Some pom.xml attributes are mandatory in Maven Central.
            // See: https://central.sonatype.org/pages/requirements.html
            pom {
                packaging "jar"

                name = project.name
                description = project.description
                url = "https://.../"

                licenses {
                    license {
                        // See: http://central.sonatype.org/pages/requirements.html#license-information
                        name = "..."
                        url = "..."
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        name = "..."
                        email = "..."
                    }
                    developer {
                        name = "..."
                        email = "..."
                    }
                    // ...
                }

                scm {
                    connection = "scm:git:git://github.com/hiroyuki-sato/embulk-filter-null_string.git"
                    developerConnection = "scm:git:git@github.com:hiroyuki-sato/embulk-filter-null_string.git"
                    url = "https://github.com/hiroyuki-sato/embulk-filter-null_string"
                }
            }
        }
    }
    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    toolVersion = '6.14.1'
}
checkstyleMain {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
checkstyleTest {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
task checkstyle(type: Checkstyle) {
    classpath = sourceSets.main.output + sourceSets.test.output
    source = sourceSets.main.allJava + sourceSets.test.allJava
}


signing {
    // Just an optional technique to specify a GPG key and password from Gradle properties.
    //
    // Set your GPG key into "signingKey" in the ASCII armor format.
    // Set your GPG key password into "signingPassword".
    //
    // It is sometimes useful to publish the plugin to Maven Central from CI like GitHub Actions.
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }

    sign publishing.publications.maven
}

gem {
    authors = [ "Hiroyuki Sato","Takuma kanari" ]
    email = [ "hiroysato@gmail.com"]
    // "description" of the gem is copied from "description" of your Gradle project.
    summary = "Null String filter plugin for Embulk"
    homepage = "https://github.com/hiroyuki-sato/embulk-filter-null_string"
    licenses = [ "MIT" ]

    generateRubyCode = false  // Avoiding generate lib/embulk/parser/jsonpath.rb
    into("lib/embulk/filter/") {
      from "lib/embulk/filter/null_string.rb"
    }
    into("lib/embulk/guess/") {
      from "lib/embulk/filter/null_string.rb"
    }
    dependencies = []
}

gemPush {
    host = "https://rubygems.org"
    //jruby = "org.jruby:jruby-complete:9.2.21.0"
}
